/*
    module  : lib.hetx
    version : 1.21
    date    : 04/20/20
*/
( true t : ;
  false f : ;
* !) put_bool : ;
#define put_bool	put_bool * !

#define gc		gc $
#define add		add $
#define mul		mul $
#define less		less $
#define put		put $
#define putch		putch $
#define get		get $
#define sub		sub $
#define stack		stack $
#define unstack		unstack $

(a % ; b % ; a * b *) swap : ;
#define swap		swap * !

(swap less) greater : ;
#define greater		greater * !

#define true		t
#define false		f

(a % ; b % ; () a * + b * + > tt =) and : ;
#define and		and * !

(a % ; b % ; () a * + b * + > ff = f =) or : ;
#define or		or * !

(f =) not : ;
#define not		not * !

(/ swap ;) first : ;
#define first		first * !

( () t : ;
  (list * first prog * ! step_rec * !) f : ;
list * () = * !) step_rec : ;
#define step_rec	step_rec * !

( prog : ;		# pick up prog
  list : ;		# pick up list
step_rec) step : ;
#define step		step * !

( list : ;		# old list
  ()			# new list
list * (+) step) reverse : ;
#define reverse		reverse * !

(swap reverse (+) step) concat : ;
#define concat		concat * !

(reverse first) last : ;
#define last		last * !

( list : ;			# list
  elem : ;			# element
  f				# assume false
  ( (; t () list : ;) t : ;	# if equal: pop f, push t, and set list to ()
    () f : ;			# if not equal: do nothing
  elem * = * !) prog : ;	# program
step_rec) member : ;
#define member		member * !

(a % a *) dup : ;
#define dup		dup * !

( list : ;		# old list
  0			# initial value
  (add) prog : ;	# program
step_rec) sum : ;
#define sum		sum * !

32 space : ;
#define space		space *

( list : ;		# old list
  1			# initial value
  (mul) prog : ;	# program
step_rec) product : ;
#define product		product * !

(swap +) cons : ;
#define cons		cons * !

(/ swap) uncons : ;
#define uncons		uncons * !

#define putsp		put space putch

( list : ;		# old list
  0			# initial value
  (; 1 add) prog : ;	# program
step_rec) length : ;
#define length		length * !

10 newline : ;
#define newline		newline *

#define nl		newline putch
#define i		!

(a % ; b % ; a * ! b *) dip : ;
#define dip		dip * !

((!) dip !) B : ;
#define B		B * !

(dup B) twice : ;
#define twice		twice * !

(dup (twice) dip !) thrice : ;
#define thrice		thrice * !

( count *
  () t : ;
  (count * 1 sub count : ; prog * ! times_rec * !) f : ;
0 = * !) times_rec : ;
#define times_rec	times_rec * !

( count : ;		# pick up count
  prog : ;		# pick up prog
times_rec) times : ;
#define times		times * !

(dup mul) square : ;
#define square		square * !

( prog : ;		# pick up prog
  list : ;		# pick up list
() step_rec reverse) map : ;
#define map		map * !

( prog : ;		# pick up prog
  init : ;		# pick up init
  list : ;		# pick up list
init * step_rec) fold : ;
#define fold		fold * !

(/ ;) rest : ;
#define rest		rest * !

(stack swap dip rest cons unstack) nullary : ;
#define nullary		nullary * !

(((nullary) cons dip cons) map) construct2 : ;
#define construct2	construct2 * !

(;) pop : ;
#define	pop		pop * !

(() cons) unit : ;
#define unit		unit * !

(a % ; b % ; () b * + a * +) pair : ;
#define pair		pair * !

(uncons uncons ; swap) unpair : ;
#define unpair		unpair * !

( prog * oldp %	;	# save old prog
  list * oldl %	;	# save old list
  map			# call map
  oldp * prog : ;	# restore old prog
  oldl * list :	;	# restore old list
) map2 : ;
#define map2		map2 * !

( list : ;		# pick up list
  count : ;		# pick up count
  (count *
    (() list : ;) t : ;	# empty the list
    (; count * 1 sub count : ;) f : ;
  0 = * !) prog : ;	# define prog
step_rec) index : ;
#define index		index * !

( (1) t : ;
  (0) f : ;
() = * !) null : ;
#define null		null * !

(/* swap */ pair index i) branch : ;
#define branch		branch * !

#undef last
(dup rest null (first) (rest last * !) branch) last : ;
#define last		last * !

(first *) definition : ;
#define definition	definition * !

#define car		first
#define cdr		rest

(dup i) x : ;
#define x		x * !

((dup cons) swap concat dup cons i) y : ;
#define y		y * !

( (1) t : ;
  (0) f : ;
less * !) smaller : ;
#define smaller		smaller * !

(1 sub) pred : ;
#define pred		pred * !

(dup 2 smaller (; 1) (dup pred factorial_rec * ! mul) branch) factorial_rec : ;
#define factorial_rec	factorial_rec * !

((swap) dip swap) rolldown : ;
#define rolldown	rolldown * !

(length 2 less) small : ;
#define small		small * !

((() ()) dip dup first
  (greater
    (+) t : ;
    (swap (+) dip) f : ;
  * !) swap +
(dup) swap concat step) partition : ;
#define partition	partition * !

(dup small
  () t : ;
  (partition quicksort * ! (quicksort * !) dip concat) f : ;
* !) quicksort : ;
#define quicksort	quicksort * !
