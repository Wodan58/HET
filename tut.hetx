/*
    module  : tut.hetx
    version : 1.19
    date    : 03/23/20
*/
#include "lib.hetx"

/*
                H E T   T U T O R I A L

HET is an imperative language that can be used to implement JOY.

JOY is a functional language which uses postfix-like notation
and operates on a stack.
The base types of HET are symbols. A list of values of any type
is a value of type list.
*/

/* push two numbers onto stack, add them, write result */
111 222 add .
/* add two numbers, add another two numbers, write product */
1 2 add 3 4 add mul .
/* testing whether 2 + 2 = 2 * 2 */
2 2 add 2 2 mul = put_bool .
/* testing whether 6 * 6 > 5 * 7 */
6 6 mul 5 7 mul greater put_bool .
/* Boolean operations */
true false or true and not put_bool .

/* LISTS */

/* push a list of numbers, reverse it, write result */
(1 2 3 4 5) reverse .
/* push two lists of symbols, concatenate, write result */
(peter paul) (mary jane) concat .
/* push a list of mixed values, write its last element */
(11 false X 44) last .
/* push a number and a list, determine membership */
3 (1 5 3 4 2) member put_bool .
/* similar */
3 (1 5 6 4 2) member put_bool .
/* push a list of numbers, duplicate to find sum and product */
(1 2 3 4) dup sum put space putch product .
/* push a number and a list of numbers, cons together */
111 (222 333) cons .
/* push a list, uncons twice, write remainder and first two */
(11 22 33 44 55) uncons uncons putsp putsp .
/* push two lists of characters, concatenate them */
(a b) (d e f) concat
/* now write result, but dup first so list is not lost */
dup .
/* insert the missing c */
uncons uncons c swap cons cons cons
/* now check */
dup .
/* what is its length ? */
dup length .
/* reverse it, write its length */
reverse length .
/* So, the length of a list is also the length of its reverse:
                length  ==  reverse length
*/

/* INPUT from terminal or input file */
get get add .
123 456

/* COMBINATORS */

/*
Combinators are operations which expect a list on top
of the stack and then execute it as a program.
*/
/* push two numbers and a program, i-combinator to execute */
111 222 (add put) i nl .
/* i-combinator to execute [+ put] on top of stack */
111 (add put) /* reverse */ 222 swap i nl .
/* dip-combinator to multiply 3 and 7, then add 100 */
3 7 100 (mul) dip add .
/* step-combinator to apply program to each member of list */
(1 2 3) (dup mul putsp) step nl .

/* i-combinator, twice-combinator, thrice-combinator */
2 (dup mul) i .
2 (dup mul) twice .
2 (dup mul) thrice .

/* times-combinator, using definition square  ==  dup *    */
2 (square) 0 times .
2 (square) 1 times .
2 (square) 2 times .
2 (square) 3 times .
2 (square) 4 times .
2 (square) 5 times . /* note overflow */

(7) 10 times stack .
/* map-combinator to make list of squares */
(1 2 3) (dup mul +) map .
/* fold-combinator to add squares of members of list */
(1 2 3) 0 (dup mul add) fold .
/* construct-combinator to make list from programs */
11 12                           /* push two numbers             */
(                               /* make a list of ..            */
  (add)                         /*  their sum                   */
  (mul)                         /*  their product               */
  (pop unit)                    /*  the unit list of first      */
  (dup pair)                    /*  the pair of the second      */
) construct2 .
/* the two numbers are still there */
(                               /* make a list of ..            */
  (pair (square +) map2 unpair add)
                                /*  the sum of their squares    */
  (pop)                         /*  the first number            */
  ()                            /*  the second number           */
) construct2 .
/* now clear the stack */
() unstack .
